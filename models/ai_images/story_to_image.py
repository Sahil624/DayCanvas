import logging
import os
import threading
import google.generativeai as genai

from models.models import FrameImages, ImageGenBatch, StoryLine

def generate_image(prompt: str):

    genai.configure(api_key=os.getenv('GEMINI_KEY'))

    imagen = genai.ImageGenerationModel("imagen-3.0-generate-001")

    retry = 3
    while retry > 0:
        result = imagen.generate_images(
            prompt=prompt,
            number_of_images=1,
            safety_filter_level="block_only_high",
            person_generation="allow_adult",
            aspect_ratio="3:4",
            negative_prompt="Outside",
        )

        if not result.images:
            retry -= 1
            logging.warning(f"Image not generated by imagen. Retry - {retry}")
            continue

        return result.images[0]
    
    return None

def _story_to_image(story: StoryLine, batch: ImageGenBatch):
    frames = story.frame_set.all()
    logging.info(f"Generate images for {len(frames)} frames")
    for frame in frames:
        output_path = f"./images/generated/{story.id}/"

        os.makedirs(output_path, exist_ok=True)

        output_path += f"{frame.id}.png"

        print("Generate Image for -", frame.image_gen_prompt)

        image = generate_image(frame.image_gen_prompt)
        if not image:
            logging.error(f"Image not generated for frame {frame}")
        else:
            image.save(output_path)
            FrameImages.objects.create(frame=frame, batch=batch, image=output_path)
        batch.completed_count += 1
        batch.save()

def story_to_image(story: StoryLine):
    batch = ImageGenBatch.objects.create(storyline=story)
    output_path = f"./images/generated/{story.id}/"

    os.makedirs(output_path, exist_ok=True)

    thread = threading.Thread(target=_story_to_image, args=(story, batch))
    thread.daemon = True
    thread.start()

    return batch